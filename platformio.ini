; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = ESP32 Sveltekit Template
data_dir = data
extra_configs =
    factory_settings.ini
    features.ini

[env]
framework = arduino
platform = espressif32 @ 6.10.0
build_flags =
    ${factory_settings.build_flags}
    ${features.build_flags}

    -std=gnu++14
    -std=c++14
    -D BUILD_TARGET=\"$PIOENV\"
    -D APP_NAME=\"SSVC-Open-Connect\"
    -D APP_VERSION=\"0.2.1.8\"

; Move all networking stuff to the protocol core 0 and leave business logic on application core 1
    -D ESP32SVELTEKIT_RUNNING_CORE=0

; Uncomment EMBED_WWW to embed the WWW data in the firmware binary
    -D EMBED_WWW

; Uncomment to configure Cross-Origin Resource Sharing
; -D ENABLE_CORS
; -D CORS_ORIGIN=\"*\"

; Uncomment to enable informations from ESP32-Sveltekit in Serial Monitor
;    -D SERIAL_INFO

; D E B U G   B U I L D F L A G S
; ===============================
; These build flags are only for debugging purposes and should not be used in production
    -D CONFIG_ARDUHAL_LOG_COLORS

; Uncomment to show log messages from the ESP Arduino Core and ESP32-SvelteKit
    -D CORE_DEBUG_LEVEL=4

; Serve config files from flash and access at /config/filename.json
;-D SERVE_CONFIG_FILES

; Uncomment to teleplot all task high watermarks to Serial
; -D TELEPLOT_TASKS

; Uncomment to use JSON instead of MessagePack for event messages. Default is MessagePack.
;    -D EVENT_USE_JSON=1

lib_compat_mode = strict

; Uncomment to include the a Root CA SSL Certificate Bundle for all SSL needs
; Needs -D FT_DOWNLOAD_FIRMWARE=1 and -D FT_NTP=1
board_build.embed_files = src/certs/x509_crt_bundle.bin
; Source for SSL Cert Store can bei either downloaded from Mozilla with 'mozilla' ('https://curl.se/ca/cacert.pem')
; or from a curated Adafruit repository with 'adafruit' (https://raw.githubusercontent.com/adafruit/certificates/main/data/roots.pem)
; or complied from a 'folder' full of *.pem / *.dem files stored in the ./ssl_certs folder
board_ssl_cert_source = adafruit

monitor_speed = 115200
monitor_filters =
    esp32_exception_decoder
    log2file
board_build.filesystem = littlefs
extra_scripts =
    pre:scripts/build_interface.py
    pre:scripts/generate_cert_bundle.py
    scripts/merge_bin.py
    scripts/rename_fw.py
lib_deps =
    ArduinoJson@>=7.0.0
    paulstoffregen/OneWire@^2.3.8
    milesburton/DallasTemperature @^3.11.0
    elims/PsychicMqttClient@^0.2.1
    adafruit/Adafruit NeoPixel@^1.12.5

[env:esp32-s3-devkitc-1-8m]
board = esp32-s3-devkitc-1-n8r2
board_build.mcu = esp32s3
board_build.partitions = default_8MB.csv
board_build.arduino.memory_type = qio_opi
board_upload.before_reset = usb_reset
build_flags =
    ${env.build_flags}
    -DWLED_INTERNAL_PIN=38
    -DWLED_EXTERNAL_PIN=40
    -DSSVC_OPEN_CONNECT_UART_TX=GPIO_NUM_17
    -DSSVC_OPEN_CONNECT_UART_RX=GPIO_NUM_18
    -DFT_DOWNLOAD_FIRMWARE=1
debug_tool = esp-builtin

[env:esp32-s3-devkitc-1-16m]
board = esp32-s3-devkitc-1-n16r8v
board_build.mcu = esp32s3
board_build.partitions = default_16MB.csv
board_build.arduino.memory_type = qio_opi
board_upload.before_reset = usb_reset
build_flags =
    ${env.build_flags}
    -DWLED_INTERNAL_PIN=38
    -DWLED_EXTERNAL_PIN=40
    -DSSVC_OPEN_CONNECT_UART_TX=GPIO_NUM_17
    -DSSVC_OPEN_CONNECT_UART_RX=GPIO_NUM_18
    -DFT_DOWNLOAD_FIRMWARE=1
debug_tool = esp-builtin

[env:esp32dev]
; Works for nodemcu-32s, devkit-v1 boards and probably others. You can change the pin defines below if needed.
board = esp32dev
board_build.partitions = min_spiffs.csv
build_flags =
    ${env.build_flags}
    -D LED_BUILTIN=2
    -D KEY_BUILTIN=0

[env:adafruit_feather_esp32s3_nopsram]
board = adafruit_feather_esp32s3_nopsram
board_build.partitions = default_8MB.csv
board_upload.before_reset = usb_reset
build_flags =
    ${env.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT=1
    -DARDUINO_USB_MODE=1
