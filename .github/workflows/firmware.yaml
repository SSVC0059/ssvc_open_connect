name: Build Firmware

on:
  push:
    branches: [ ]
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_name: [esp32dev, esp32-s3-devkitc-1-16m, esp32-s3-devkitc-1-8m]  # Указываем цели для сборки

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install Python requirements
        run: |
          pip install -r requirements.txt

      - name: Build firmware for ${{ matrix.env_name }}
        run: platformio run --environment ${{ matrix.env_name }}

      - name: Collect artifacts for ${{ matrix.env_name }}
        run: |
          mkdir -p artifacts/firmware/${{ matrix.env_name }}
          cp -r build/${{ matrix.env_name }}/* artifacts/firmware/${{ matrix.env_name }}/
          cd artifacts/firmware/${{ matrix.env_name }}
          zip -r ../.. /artifacts/zips/${{ matrix.env_name }}.zip .

      - name: Find firmware version
        id: version
        run: |
          cd artifacts/${{ matrix.env_name }}
          for file in SSVC-Open-Connect_*.bin; do
            version=$(echo "$file" | grep -oP '(?<=_)[0-9]+-[0-9]+-[0-9]+-[0-9]+(?=\.bin)')
            echo "version=$version" >> $GITHUB_OUTPUT
            break
          done

      - name: Upload zip archive for ${{ matrix.env_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env_name }}-zip
          path: artifacts/zips/${{ matrix.env_name }}.zip
          if-no-files-found: error

      - name: Upload firmware binaries for ${{ matrix.env_name }}
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.env_name }}
          path: artifacts/firmware/${{ matrix.env_name }}/SSVC-Open-Connect_*.{bin,md5}
          if-no-files-found: error

  create-release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/

      - name: Debug files
        run: |
          find artifacts -type f

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || 'v0.0.0' }}
          release_name: Release ${{ github.ref_name || 'v0.0.0' }}
          draft: false
          prerelease: false

      - name: Upload Release for ESP32S3-16m
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/firmware/esp32-s3-devkitc-1-16m/SSVC-Open-Connect_esp32-s3-devkitc-1-16m_${{ needs.build.outputs.version }}.bin
          asset_name: SSVC-Open-Connect_esp32-s3-devkitc-1-16m_${{ needs.build.outputs.version }}.bin
          asset_content_type: application/octet-stream

      - name: Upload MD5 Checksum for ESP32S3-16m
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/firmware/esp32-s3-devkitc-1-16m/SSVC-Open-Connect_esp32-s3-devkitc-1-16m_${{ needs.build.outputs.version }}.md5
          asset_name: SSVC-Open-Connect_esp32-s3-devkitc-1-16m_${{ needs.build.outputs.version }}.md5
          asset_content_type: text/plain

      - name: Upload Release for ESP32S3-8m
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/firmware/esp32-s3-devkitc-1-8m/SSVC-Open-Connect_esp32-s3-devkitc-1-8m_${{ needs.build.outputs.version }}.bin
          asset_name: SSVC-Open-Connect_esp32-s3-devkitc-1-8m_${{ needs.build.outputs.version }}.bin
          asset_content_type: application/octet-stream

      - name: Upload MD5 Checksum for ESP32S3-8m
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/firmware/esp32-s3-devkitc-1-8m/SSVC-Open-Connect_esp32-s3-devkitc-1-8m_${{ needs.build.outputs.version }}.md5
          asset_name: SSVC-Open-Connect_esp32-s3-devkitc-1-8m_${{ needs.build.outputs.version }}.md5
          asset_content_type: text/plain

      - name: Upload ESP32DEV Zip Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zips/esp32dev.zip
          asset_name: esp32dev_${{ needs.build.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload ESP32-S3-16M Zip Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zips/esp32-s3-devkitc-1-16m.zip
          asset_name: esp32-s3-devkitc-1-16m_${{ needs.build.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload ESP32-S3-8M Zip Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zips/esp32-s3-devkitc-1-8m.zip
          asset_name: esp32-s3-devkitc-1-8m_${{ needs.build.outputs.version }}.zip
          asset_content_type: application/zip